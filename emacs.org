
# ------------------------------------------------------------------------------
#+TITLE: Emacs From Scratch Configuration    
#+AUTHOR:    Holy Frege
#+EMAIL:     holy_frege@fastmail.com
#+STARTUP:   content showstars indent inlineimages hideblocks
#+OPTIONS:   toc:2 html-scripts:nil num:nil html-postamble:nil html-style:nil ^:nil
#+PROPERTY: header-args :emacs-lisp :tangle ./init.el :mkdirp yes
# ------------------------------------------------------------------------------

* org babel preparation
#+BEGIN_SRC emacs-lisp
  ;; (use-package ob-prolog
  ;; :ensure t)
  ;; (setq org-babel-prolog-command "swipl")
#+END_SRC
* Org babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     ;; (prolog . t)
     (python . t)))
  (setq org-confirm-babel-evaluate nil)
#+end_src

#+begin_src emacs-lisp 
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun holy/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/emacs.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'holy/org-babel-tangle-config)))

#+end_src

* meta key settings
#+begin_src emacs-lisp
(setq ns-command-modifier 'meta)
#+end_src


* package setting
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package auto-package-update
   :custom
   (auto-package-update-interval 7)
   (auto-package-update-prompt-before-update t)
   (auto-package-update-hide-results t)
   :config
   (auto-package-update-maybe)
   (auto-package-update-at-time "09:00"))
#+end_src


* "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* disable backup and autosave file.
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC
* Basic UI settings
#+begin_src emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)          ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)
#+end_src

* yasnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
  ;; (add-to-list 'yas-snippet-dirs "~/Dropbox/WorkSpace/emacs/snippets")
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  :bind
  ("C-c s" . yas-insert-snippet)
  ("C-c n" . yas-new-snippet)
  ("C-c v" . yas-visit-snippet-file))
#+end_src


* UI theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-monokai-spectrum t))
#+END_SRC

* doom mode line
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
  :custom ((doom-modeline-height 18)))

#+END_SRC

* font settings
#+BEGIN_SRC emacs-lisp
    (defun holy/set-font-faces ()		
      (message "Setting faces!")
      ;; (set-face-attribute 'default nil :font "Fira Code" :height holy/default-font-size)
      (set-face-attribute 'default nil :font "Fira Code"  :height 180)
      ;; (set-face-attribute 'default nil :font "Fira Code Retina-14" :height holy/default-font-size)

      ;; Set the fixed pitch face
      ;; (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height holy/default-font-size) 
      (set-face-attribute 'fixed-pitch nil :font "Fira Code"  :height 180)
      ;; Set the variable pitch face
      ;; (set-face-attribute 'variable-pitch nil :font "Cantarell" :height holy/default-font-size :weight 'regular)
      (set-face-attribute 'variable-pitch nil :font "Cantarell"  :height 180)
      (set-face-attribute 'region nil :background "#834")
      )

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (holy/set-font-faces))))
    (holy/set-font-faces))

#+END_SRC

* org bullet headings
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "▶" "●" "○" "●")))
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC

* Numbering Multiple window(ace window)
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
:init
(progn
(global-set-key [remap other-window] 'ace-window)
(custom-set-faces
'(aw-leading-char-face
((t (:inherit ace-jump-face-foreground :height 3.0)))))
))
#+END_SRC

* lorem ipsum
#+BEGIN_SRC emacs-lisp
(use-package lorem-ipsum
:config
(lorem-ipsum-use-default-bindings))
#+END_SRC


* ivy and counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           :map ivy-switch-buffer-map
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))


  (use-package counsel
    :ensure t
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))

  (use-package ivy-rich
    :after counsel
    :init
    (ivy-rich-mode 1))

#+END_SRC

* ivy-switch-buffer color configuration
#+BEGIN_SRC emacs-lisp
  ;; (require 'package)
  ;; (package-initialize)
  ;; (require 'swiper)

  ;; (progn
  ;;   (set-face-attribute 'ivy-current-match nil :foreground "white")
  ;;   (set-face-attribute 'ivy-minibuffer-match-face-2 nil :foreground "white" :background "red")
  ;;   (set-face-attribute 'ivy-minibuffer-match-face-3 nil :foreground "white" :background "darkgreen")
  ;;   (set-face-attribute 'ivy-minibuffer-match-face-4 nil :foreground "white" :background "blue")
  ;;   ;;
  ;;   (set-face-attribute 'swiper-match-face-2         nil :foreground "white" :background "red")
  ;;   (set-face-attribute 'swiper-match-face-3         nil :foreground "white" :background "darkgreen")
  ;;   (set-face-attribute 'swiper-match-face-4         nil :foreground "white" :background "blue"))
#+END_SRC
* rainbow delimeters
#+BEGIN_SRC emacs-lisp
    ;; (use-package rainbow-delimiters
    ;;   :ensure t
    ;;   :hook ((prog-mode org-mode) . rainbow-delimiters-mode))

    ;; (setq rainbow-delimiters-outermost-only-face-count 0)
    ;; (setq rainbow-delimiters-max-face-count 1)
    ;; (custom-set-faces
    ;;  '(rainbow-delimiters-depth-1-face ((t (:foreground "#7070a0")))))
  ;; (set-face-attribute 'rainbow-delimiters-unmatched-face nil
  ;;                     :foreground 'unspecified
  ;;                     :inherit 'error)

#+END_SRC

* highlight parentheses
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :hook
    ((prog-mode org-mode) . highlight-parentheses-mode)
    :init
    ;; (setq highlight-parentheses-colors '("green" "red" "red orange" ))
    
    (setq highlight-parentheses-colors '("#00e1ff" "red" "green" "blue" ))
    :custom-face
    ;; (highlight-parentheses-highlight ((t (:weight bold))))
    )

#+END_SRC


* org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :after org
    :init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
    :custom
    (org-roam-directory "/Users/holy/Dropbox/org/RoamNotes") ; replace with your path
    :bind (("C-c r l" . org-roam-buffer-toggle)
           ("C-c r f" . org-roam-node-find))
    ; global-page-break-lines-mode will break the org-roam buffer
    :hook ( org-roam-mode . (lambda () (global-page-break-lines-mode -1)))
    :config
    (org-roam-setup))
#+END_SRC

* undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :init
  (undo-tree-mode))
#+END_SRC

* neo tree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (global-set-key (kbd "C-c t") 'neotree-toggle)
#+END_SRC


* ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
* org list marker to dot
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  ;; (use-package projectile
  ;;   :diminish projectile-mode
  ;;   :config
  ;;   (projectile-mode +1)
  ;;   (setq projectile-enable-caching t)
  ;;   (setq projectile-indexing-method 'alien)
  ;;   :custom
  ;;   ((projectile-completion-system 'ivy))
  ;;   :bind-keymap
  ;;   ("C-c p" . projectile-command-map)
  ;;   :init
  ;;   (when (file-directory-p "/Users/holy/MyProjects")
  ;;         (setq projectile-project-search-path '("/Users/holy/MyProjects")))
  ;;       (setq projectile-switch-project-action #'projectile-dired))

  ;; (use-package counsel-projectile
  ;;   :ensure t
  ;;   :config
  ;;   (counsel-projectile-mode))

#+END_SRC
* which key
#+BEGIN_SRC emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+END_SRC
* company mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t))
#+END_SRC
* common lisp settings
** sly
#+BEGIN_SRC emacs-lisp
  (use-package sly
  :ensure t
  :config
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  )
#+END_SRC
** sly-quicklisp
#+BEGIN_SRC emacs-lisp
  (use-package sly-quicklisp
  :ensure t
  :config
  (add-to-list 'load-path "/Users/holy/.emacs.d/lisp/quicklisp")
  )
#+END_SRC
** sly-asdf
#+BEGIN_SRC emacs-lisp
  (use-package sly-asdf
  :ensure t)
#+END_SRC
** sly-contribs
#+BEGIN_SRC emacs-lisp
(setq sly-contribs '(sly-asdf sly-mrepl sly-scratch ))
#+END_SRC
* transpose window
#+BEGIN_SRC emacs-lisp
    (use-package buffer-move
    :ensure t
    :config
    (global-set-key (kbd "<C-up>")     'buf-move-up)
    (global-set-key (kbd "<C-down>")   'buf-move-down)
    (global-set-key (kbd "<C-left>")   'buf-move-left)
    (global-set-key (kbd "<C-right>")  'buf-move-right)
    )
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (setq magit-branch-read-upstream-first 'fallback)
  (use-package forge
    :ensure t)

#+END_SRC
* prolog
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/Users/holy/.emacs.d/lisp/")
  (load "prolog.el")
  (add-to-list 'auto-mode-alist '("\\.pl$" . prolog-mode))
  (setq prolog-electric-if-then-else-flag t)
#+END_SRC

