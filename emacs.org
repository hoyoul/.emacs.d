# ------------------------------------------------------------------------------
#+TITLE: Emacs From Scratch Configuration    
#+AUTHOR:    Holy Frege
#+EMAIL:     holy_frege@fastmail.com
#+STARTUP:   content showstars indent inlineimages hideblocks
#+OPTIONS:   toc:2 html-scripts:nil num:nil html-postamble:nil html-style:nil ^:nil
#+PROPERTY: header-args :emacs-lisp :tangle ./init.el :mkdirp yes
# ------------------------------------------------------------------------------

* Org babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))
  (setq org-confirm-babel-evaluate nil)
#+end_src

#+begin_src emacs-lisp 
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun holy/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/emacs.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'holy/org-babel-tangle-config)))

#+end_src

* meta key settings
#+begin_src emacs-lisp
(setq ns-command-modifier 'meta)
#+end_src

* package setting
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package auto-package-update
   :custom
   (auto-package-update-interval 7)
   (auto-package-update-prompt-before-update t)
   (auto-package-update-hide-results t)
   :config
   (auto-package-update-maybe)
   (auto-package-update-at-time "09:00"))
#+end_src

* Basic UI settings
#+begin_src emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)          ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)
#+end_src

* yasnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
  ;; (add-to-list 'yas-snippet-dirs "~/Dropbox/WorkSpace/emacs/snippets")
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  :bind
  ("C-c s" . yas-insert-snippet)
  ("C-c n" . yas-new-snippet)
  ("C-c v" . yas-visit-snippet-file))
#+end_src


* UI theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-monokai-spectrum t))
#+END_SRC

* doom mode line
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
  :custom ((doom-modeline-height 18)))

#+END_SRC

* font settings
#+BEGIN_SRC emacs-lisp

 (defun holy/set-font-faces ()		
   (message "Setting faces!")
   ;; (set-face-attribute 'default nil :font "Fira Code" :height holy/default-font-size)
      (set-face-attribute 'default nil :font "Fira Code"  :height 180)
   ;; (set-face-attribute 'default nil :font "Fira Code Retina-14" :height holy/default-font-size)

       ;; Set the fixed pitch face
   ;; (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height holy/default-font-size) 
   (set-face-attribute 'fixed-pitch nil :font "Fira Code"  :height 180)
       ;; Set the variable pitch face
   ;; (set-face-attribute 'variable-pitch nil :font "Cantarell" :height holy/default-font-size :weight 'regular)
      (set-face-attribute 'variable-pitch nil :font "Cantarell"  :height 180)
)

(if (daemonp)
    (add-hook 'after-make-frame-functions
       (lambda (frame)
               (setq doom-modeline-icon t)
           (with-selected-frame frame
                (holy/set-font-faces))))
    (holy/set-font-faces))

#+END_SRC
